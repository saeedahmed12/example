------------------Install/Activate Django--------------------------
  conda create --name myDjangoEnv python=3.5
  conda info --envs
  activate myDjangoEnv
  conda install django=1.10  [remember to install in VENV]
  conda list
  deactivate
  
----------------Create Pro and runserver------------------------------------
  mkdir my_Django_Stuff
  activate myDjangoEnv
  django-admin startproject first_project  [creates a project]

  activate myDjangoEnv
  cd My_Django_Stuff
  cd first_project
  python manage.py runserver

----------------Create a new App------------------------------------
  python manage.py startapp first_app  [creates an app]


#add first_app to INSTALLED_APPS list in first_project settings
#create view in project (each view exists as its own independent function in views.py file in app)
##In views file, 
Py from django.http import HttpResponse
Py def index(request):
 	return HttpResponse('hello world')
 
#map view to urls.py file in project (this version doesn't use 'include')
Py from first_app import views
add url to urlpatterns list
Py 'url(r'^$', views.index),

#runserver


---------------------Create a New App (use include for url mapping; and app in this case is 'Ap1')---------------

#add Ap1 to INSTALLED_APPS list in first_project settings

#create view in project 
##In views file, 
Py from django.http import HttpResponse
Py def index(request):
 	return HttpResponse('hello world')
  
#in project urls.py file, import include, and add url pattern pointing to urls file in app
Py from django.conf.urls import include
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^$', include('Ap1.urls')),   #add
    url(r'^Ap1/', include('Ap1.urls')),  #add
]

#create a url file in app and add patterns
PY--
from django.conf.urls import url
from Ap1 import views
urlpatterns = [
    url(r'^$', views.index, name='index'),      #this will allow http://localhost:8000/ and http://localhost:8000/Ap1/
    url(r'^Ap1/', views.index, name='index'),]   #this will allow http://localhost:8000/Ap1/ and http://localhost:8000/Ap1/Ap1/
--PY

#runserver


---------------------Create a New App with template (app is 'personal'; project is Pro1)---------------

#add personal to INSTALLED_APPS list in first_project settings

#in project urls.py file, import include, and add url pattern pointing to urls file in app
Py-- 
from django.conf.urls import url,include
from django.contrib import admin
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^$', include('personal.urls')),]
--PY

#create a urls.py file in app and add patterns
Py--
from django.conf.urls import url
from . import views
urlpatterns = [
    url(r'^$', views.index, name='index'),]
--Py

#create view in project 
##In views file
PY--
from django.shortcuts import render
def index(request):
    return render(request, 'personal/home.html')
--PY

# see this tutorial for the templates creates (three files: home.html, header.html, and htmlsnippets
# created in directory:  personal/templates/personal/home.html; personal/templates/personal/header.html
# and personal\templates\personal\includes\htmlsnippet.html
---> https://pythonprogramming.net/jinja-templates-django-python-tutorial/
------> https://www.dropbox.com/sh/75k4mqk6e1rty4f/AACZe2pK2tZR7OYBtY2EbquEa?dl=0

#runserver
-----------------------installing UML
activate myDjangoEnv
conda install graphviz
conda install -c conda-forge django-extensions
pip install pyparsing==1.5.6
conda install pydot

PY add 'django_extensions' to Installed Apps list in project settings

python manage.py graph_models -a -o test.png


https://learn.yancyparedes.net/2016/02/generating-uml-class-diagram-from-django-model/

------------------------setting up initial sqllite database in django

#Setup models folder (lecture 128)

#Build Sql database
activate myDjangoEnv
python manage.py migrate                   #in project folder
python manage.py makemigrations first_app  #register changes to app
python manage.py migrate
python manage.py shell

#check to see if it worked
>>> from first_app.models import Topic
>>> print(Topic.objects.all())
<QuerySet [<Topic: News>, <Topic: Marketplace>, <Topic: Games>, <Topic: Social>, <Topic: Search>]>
>>> t = Topic(top_name="Social Network")
>>> t.save()
>>> print(Topic.objects.all())
<QuerySet [<Topic: News>, <Topic: Marketplace>, <Topic: Games>, <Topic: Social>, <Topic: Search>, <Topic: Social Network>]>
>>> quit()

# Register models in admin.py model

python manage.py createsuperuser
Username (leave blank to use 'ahmed'):
Email address: saeedahmed12@hotmail.com
Password: ba123456

python manage.py runserver

# http://127.0.0.1:8000/admin/


------------------------populating with fake data (lecture 129)--------------
#get faker (pip install in right env)
activate MyDjangoEnv
pip install Faker

#make new py file in project (in this case populate_first_app.py)
python populate_first_app.py
python manage.py runserver
---------------------> fake data in website!

-------------------Models templates view-----------------------------


#Models, templates, Views example, lecture 132

activate myDjangoEnv
django-admin startproject Pro3
cd Pro3
python manage.py startapp ProApp
mkdir templates
cd templates
mkdir ProApp
cd ProApp
type nul > user.html
type nul > index.html

#settings.py file
## create template directory link
  TEMPLATE_DIR = os.path.join(BASE_DIR, 'templates')
## add TEMPLATE_DIR, to 'DIRS' key in Templates list
## add the new app
  'ProApp' to INSTALLED_APPS list


#go to ProApp and open models.py to create models
class User(models.Model):
  first_name = models.CharField(max_length=128)
  last_name = models.CharField(max_length=128)
  emails = models.EmailField(max_length=264,unique=True)

#go to Views
# import Models
 from ProApp.models import User
# set up index
def index(request):
  return render(request, 'ProApp/index.html')
# set up model view
def users(request):
    user_list = User.objects.order_by('last_name')
    user_dict = {'users': user_list}
    return render(request, 'ProApp/users.html', context=user_dict)


cd ..
cd ProApp
type nul > urls.py

#go to app url file and add code so that views can be found
from django.conf.urls import url
from ProApp import views
urlpatterns = [
    url (r'^$', views.users,name='users'),
]

#go to project url file and add/amend code so that index and user can be found
#index will be function view, and user will with 'include'
from django.conf.urls import url, include
from django.contrib import admin
from ProApp import views
urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url (r'^$', views.index,name='index'),
    url(r'^users/', include('ProApp.urls')),
]

python manage.py migrate
python manage.py makemigrations ProApp
python manage.py migrate

#tell admin file about model
from ProApp.models import User
admin.site.register(User)

python manage.py runserver  -> should yield blank page, and if /admin added, show login page

python manage.py createsuperuser
Username (leave blank to use 'ahmed'):
Email address: wx19@mail.com
Password: ba123456

#populate database with fake data
type  nul > populate_users.py
#Take a look at populate_users.py for code

#set up template
# take a look at code users.html in My_Django_Stuff\Pro3\templates\ProApp 
(https://www.dropbox.com/sh/5ezmani995bs372/AADbEycgmwoH3KMVHlqclYgfa?dl=0)
---> http://127.0.0.1:8000/users/

#See another example in first_project
(https://www.dropbox.com/sh/580k5cm533mfdua/AAD5Ib7M84Fqu_mcynEy7qgEa?dl=0)
activate myDjangoEnv
cd old
cd 14-Django_Level_One
cd first_project
python manage.py runserver
--->http://127.0.0.1:8000





